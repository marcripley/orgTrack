{
  "name": "nomnom",
  "description": "Option parser with generated usage and commands",
  "version": "0.6.1",
  "author": {
    "name": "Heather Arthur",
    "email": "fayearthur@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/harthur/nomnom.git"
  },
  "main": "./nomnom",
  "keywords": [
    "arguments",
    "option parser",
    "command line",
    "options",
    "parser"
  ],
  "dependencies": {
    "underscore": ">= 1.1.5"
  },
  "readme": "# nomnom\nnomnom is an option parser for node and CommonJS. It noms your args and gives them back to you in a hash.\n\n```javascript\nvar options = require(\"nomnom\")\n    .opts({\n        debug : {\n            abbr: 'd',\n            help: 'Print debugging info'\n        },\n        version: {\n            help: 'print version and exit',\n            callback: function() {\n                return \"version 1.2.4\";\n            }\n        },\n        config: {\n            abbr: 'c',\n            default: 'config.json',\n            help: 'JSON file with tests to run'\n        }\n    })\n    .parseArgs();\n\nif(options.debug)\n    // do stuff\n```\n\t\nYou don't have to specify anything if you don't want to:\n\n```javascript\nvar options = require(\"nomnom\").parseArgs();\n\nvar url = options[0];      // get the first positional arg\nvar debug = options.debug  // see if --debug was specified\nvar verbose = options.v    // see if -v was specified\nvar extras = options._     // get an array of the unmatched, positional args\n```\n\n# Install\nfor [node.js](http://nodejs.org/) and [npm](http://github.com/isaacs/npm):\n\n\tnpm install nomnom\n\n# More Details\nNomnom supports args like `-d`, `--debug`, `--no-debug`, `--file=test.txt`, `--file test.txt`, `-f test.txt`, `-xvf`, and positionals. Positionals are arguments that don't fit the `-a` or `--atomic` format and aren't attached to an option.\n\nValues are JSON parsed, so `--debug=true --count=3 --file=log.txt` would give you:\n\n```\n{\n    \"debug\": true,\n    \"count\": 3,\n    \"file\": \"log.txt\"\n}\n```\n\n# Commands\nNomnom supports command-based interfaces (e.g. with git: `git add -p` and `git rebase -i` where `add` and `rebase` are the commands):\n\n```javascript\nvar parser = require(\"nomnom\");\n\nparser.command('browser')\n    .callback(runBrowser)\n    .help(\"run browser tests\");\n\nparser.command('sanity')\n    .opts({\n        filename: {\n            position: 1,\n            help: 'test file to run'\n        },\n        config: {\n            abbr: 'c',\n            metavar: 'FILE',\n            default: 'config.json',\n            help: 'json file with tests to run'\n        }\n    })\n    .callback(function(options) {\n         runSanity(options.filename);\n    })\n    .help(\"run the sanity tests\")\n\nparser.parseArgs();\n```\n\nEach command generates its own usage message when `-h` or `--help` is specified with the command.\n\n# Usage\nNomnom prints out a usage message if `--help` or `-h` is an argument. Usage for these options in `test.js`:\n\n```javascript\nvar options = require(\"nomnom\")\n    .scriptName(\"runtests\")\n    .opts({\n        path: {\n            position: 0,\n            help: \"Test file to run\",\n            list: true\n        },\n        config: {\n            abbr: 'c',\n            metavar: 'FILE',\n            help: \"Config file with tests to run\"\n        },\n        debug: {\n            abbr: 'd',\n            help: \"Print debugging info\"\n        }\n    }).parseArgs();\n```\n\n...would look like this:\n\n\tusage: runtests <path>... [options]\n\n\tpath     Test file to run\n\n\toptions:\n\t   -c FILE, --config=FILE   Config file with tests to run\n\t   -d, --debug              Print debugging info\n\n# Options hash\nThe options hash that is passed to `nomnom.opts()` is a hash keyed on option name. Each option specification can have the following fields:\n\n#### abbr, full, and metavar\n`abbr` is the single character string to match to this option, `full` is the full-length string (defaults to the name of the option). `metavar` is used in the usage printout and specifies that the option expects a value, `expectsValue` can also be set to `true` for this purpose (default is `false`).\n\nThis option matches `-d` and `--debug` on the command line:\n\n```javascript\ndebug: {\n  abbr: 'd'\n}\n```\n\nThis option matches `-n 3`, `--num-lines 12` on the command line:\n\n```javascript\nnumLines: {\n   abbr: 'n',\n   full: 'num-lines',\n   expectsValue: true\n}\n```\n\nas does:\n\n```javascript\nnumLines: {\n   abbr: 'n',\n   full: 'num-lines',\n   metavar: \"NUM\"\n}\n```\n\n#### string\n\nA shorthand for `abbr`, `full`, and `metavar`. For example, to attach an options to `-c` and `--config` and require an argument use a `string: \"-c FILE, --config=FILE\"`\n\n#### help\n\nA string description of the option for the usage printout.\n\n#### default\n\nThe value to give the option if it's not specified in the arguments.\n\n#### callback\n\nA callback that will be executed as soon as the option is encountered. If the callback returns a string it will print the string and exit:\n\n```javascript\n\ncount: {\n    expectsValue: true,\n    callback: function(count) {\n        if(count != parseInt(count))\n            return \"count must be an integer\";\n    }\n}\n```\n\n#### position\n\nThe position of the option if it's a positional argument. If the option should be matched to the first positional arg use position `0`\n\n#### list\n\nSpecifies that the option is a list. Appending can be achieved by specifying the arg more than once on the command line:\n\n\tnode test.js --file=test1.js --file=test2.js\n\nIf the option has a `position` and `list` is `true`, all positional args including and after `position` will be appended to the array.\n\n#### required\n\nIf this is set to `true` and the option isn't in the args, a message will be printed and the program will exit.\n\n#### choices\n\nA list of the possible values for the option (e.g. `['run', 'test', 'open']`). If the parsed value isn't in the list a message will be printed and the program will exit.\n\n#### type\n\nIf you don't want the option JSON-parsed, specify type `\"string\"`.\n\n#### hidden\n\nOption won't be printed in the usage\n\n\n# Parser interface\n`require(\"nomnom\")` will give you the option parser. You can also make an instance of a parser with `require(\"nomnom\")()`. You can chain any of these functions off of a parser:\n\n#### opts\n\nThe options hash.\n\n#### usage\n\nThe string that will override the default generated usage message.\n\n#### help\n\nA string that is appended to the usage.\n\n#### scriptName\n\nNomnom can't detect the alias used to run your script. You can use `scriptName` to provide the correct name instead of e.g. `node test.js`.\n\n#### printFunc\n\nOverrides the usage printing function.\n\n#### command\n\nTakes a command name and gives you a command object on which you can chain command options.\n\n#### callback\n\nA callback that will be called with the parsed options. If a command is expected, this is the fallback callback when no command is specified.\n\n#### globalOpts\n\nThe global options when commands are specified. Any options in here will be included in the usage string for any command.\n\n#### parseArgs\n\nParses node's `process.argv` and returns the parsed options hash. You can also provide argv:\n\n```javascript\nvar options = nomnom.parseArgs([\"-xvf\", \"--atomic=true\"])\n```\n\n# Command interface\nA command is specified with `nomnom.command('name')`. All these functions can be chained on a command:\n\n#### opts\n\nThe options for this command.\n\n#### callback\n\nA callback that will be called with the parsed options when the command is used.\n\n#### help\n\nA help string describing the function of this command.\n\n#### usage\n\nOverride the default generated usage string for this command.\n",
  "readmeFilename": "README.md",
  "_id": "nomnom@0.6.1",
  "_from": "nomnom@0.6.1"
}
